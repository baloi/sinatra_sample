> install stuff:
  $ gem install sinatra
  $ gem install activerecord
  $ gem install sinatra-activerecord
  $ gem install sqlite3
> create 'app.rb':
  require 'sinatra'
  require 'sinatra/activerecord'
> create 'Rakefile':
  require 'app'
  require 'sinatra/activerecord/rake'

> Run 'rake'
  $ rake -T   # should show 'rake db:create_migration & rake db:migrate'

> Run rake create migration
  $ rake db:create_migration NAME=create_shortened_urls

> edit the migration created:

  class CreateShortenedUrls < ActiveRecord::Migration
    def self.up
      create_table :shortened_urls do |t|
        t.string :url
      end
      add_index :shortened_urls, :url
    end
  
    def self.down
      drop_table :shortened_urls
    end
  end

> run db:migrate
  $ rake db:migrate
  
  # this creates 'development.db'
  # use "$ sqlite3 development.db" to view

> you can tinker with the migration by going into irb
  . require './app'
  . require './db/migrate/20111113224704_create_shortened_urls'
  . CreateShortenedUrls.down # this will drop the table
  . CreateShortenedUrls.up   # this iwll create the table again

> Now create the active record model in app.rb

class ShortenedURL < ActiveRecord::Base 
  validates_uniqueness_of :url
  validates_presence_of :url
end

> Now create the root path

  get '/' do
    "hello world"
  end

> run app with
  $ ruby -rubygems app.rb

> Install capybara:
  $ sudo port install libffi # before capybara
  $ gem install capybara

> create test directory and first_test.rb:

  require './app'
  require 'capybara'
  require 'capybara/dsl'
  require 'test/unit'
  
  class FirstTest < Test::Unit::TestCase
    include Capybara::DSL
  
    def setup
      Capybara.app = Sinatra::Application.new
    end
  
    def test_it_works
      visit '/'
      assert page.has_content?('Hello World')
    end
  
  end
  
  # Note: Capybara's DSL sample: https://github.com/jnicklas/capybara
  
> test from root directory and just do ruby tests/*_test.rb

> install guard:
  $ gem install guard
  $ gem install guard-test
  $ gem install rb-fsevent

> initialize guard
  $ guard init test

> run guard
  $ guard

> how about testing it with restclient?
  $ restclient http://localhost:4567
  - get '/'

> how about vim commands?
  :tabs         list all tabs including their displayed windows
  :tabm 0       move current tab to first
  :tabm         move current tab to last
  :tabm {i}     move current tab to position i+1
  
  :tabn         go to next tab
  :tabp         go to previous tab
  :tabfirst     go to first tab
  :tablast      go to last tab

  :tabedit {file}   edit specified file in a new tab
  :tabfind {file}   open a new tab with filename given, searching the 'path' to find it
  :tabclose         close current tab
  :tabclose {i}     close i-th tab
  :tabonly          close all other tabs (show only the current tab)

  In normal mode:
  gt            go to next tab
  gT            go to previous tab
  {i}gt         go to tab in position i

> gem install shotgun
  $ shotgun -p 4567 app.rb

> gem install sample_models

namespace :db do
  namespace :schema do
    desc "Create a db/schema.rb file that can be portably used against any DB supported by AR"
      task :dump => :environment do
        require 'active_record/schema_dumper'
        File.open(ENV['SCHEMA'] || "db/schema.rb", "w") do |file|
        ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
      end
    end
                                        Â 
    desc "Load a schema.rb file into the database"
      task :load => :environment do
        file = ENV['SCHEMA'] || "db/schema.rb"
        load(file)
      end
    end
  end
end
